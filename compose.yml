services:
  setup:
    container_name: setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    env_file:
      - .env
    volumes:
      - es_certs:/usr/share/elasticsearch/config/certs
      - kibana_certs:/usr/share/elasticsearch/config/kibana_certs
      - logstash_certs:/usr/share/elasticsearch/config/logstash_certs
      - ./elk/setup.sh:/usr/local/bin/setup.sh:ro
      - ./elk/filebeat/filebeat.yml:/usr/share/elasticsearch/config/filebeat.yml
    user: "0"
    command: ["bash", "/usr/local/bin/setup.sh"]

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: always
    env_file:
      - ./elk/elasticsearch/.env
    volumes:
      - es_certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
    depends_on:
      - setup
    # ports:
    #   - "9200:9200"
    mem_limit: ${ES_MEM_LIMIT}

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    restart: always
    user: root
    env_file:
      - ./elk/logstash/.env
    volumes:
      - es_certs:/usr/share/logstash/config/certs:ro
      - logstash_certs:/usr/share/logstash/config/logstash_certs:ro
      - logstashdata:/usr/share/logstash/data
      - ./elk/logstash/logstash_ingest_data/:/usr/share/logstash/ingest_data/
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
      - kibana

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: always
    env_file:
      - ./elk/kibana/.env
    volumes:
      - es_certs:/usr/share/kibana/config/certs:ro
      - kibana_certs:/usr/share/kibana/config/kibana_certs:ro
      - kibanadata:/usr/share/kibana/data
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./elk/kibana/init.sh:/usr/share/kibana/init.sh
    entrypoint: ["/bin/sh", "/usr/share/kibana/init.sh"]
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    mem_limit: ${KB_MEM_LIMIT}

  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    restart: always
    user: root
    entrypoint: ["/bin/sh", "/usr/share/filebeat/entrypoint.sh"]
    env_file:
      - ./elk/filebeat/.env
    volumes:
      - es_certs:/usr/share/filebeat/certs:ro
      - filebeatdata:/usr/share/filebeat/data
      - ./elk/filebeat/filebeat_ingest_data/:/usr/share/filebeat/ingest_data/
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./elk/filebeat/entrypoint.sh:/usr/share/filebeat/entrypoint.sh
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      elasticsearch:
        condition: service_started

  frontend:
    container_name: frontend
    build: ./frontend
    restart: always
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/app
      - frontend_modules:/app/node_modules
    depends_on:
      - backend

  backend:
    container_name: backend
    build: ./backend
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      blockchain:
        condition: service_started
      vault:
        condition: service_started
    volumes:
      - ./backend:/backend
      - ./backend/entrypoint.sh:/backend/entrypoint.sh
      - ./blockchain:/blockchain
      - backend_modules:/backend/node_modules
      - abi:/backend/src/infrastructure/abi

  blockchain:
    container_name: blockchain
    build: ./blockchain
    restart: always
    volumes:
      - ./blockchain:/app
      - abi:/app/abi
      - blockchain_modules:/app/node_modules

  waf:
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: waf
    restart: always
    user: "0:0"
    depends_on: [frontend, backend]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/server.conf:/etc/nginx/conf.d/zzz-server.conf:ro
      - server_certs:/etc/nginx/certs

  vault:
    container_name: vault
    build: ./vault
    ports:
      - "8201:8201"
    env_file:
      - ./vault/.env
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs

volumes:
  frontend_modules:
  backend_modules:
  blockchain_modules:
  esdata:
  logstashdata:
  kibanadata:
  filebeatdata:
  vault_data:
  vault_logs:
  
  abi:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_ROOT}/files/abi

  es_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_ROOT}/certs/elk
  server_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_ROOT}/certs/server
  kibana_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_ROOT}/certs/kibana
  logstash_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_ROOT}/certs/logstash

networks:
 default:
   name: elastic
   external: false
